
@Scripts.Render("~/bundles/script")

@{
    ViewBag.Title = "About";
}
@*<img id="scream" width="220" height="277" src="~/Views/Home/lol.jpg"  alt="The Scream">*@

<header>

    <h2 class="shadowtext" style="text-align:center;">About</h2>

</header>
<section>
    <div>
        <p class="book">
            From time to time people have wondered why reading is important. There seems so many other things to do with one's time. Reading is important for a variety of reasons. We will look at some of those fundamental reasons below, but it is important to realize that struggling with vital reading skills is not a sign of low intelligence. For example, John Corcoran, who wrote The Teacher Who Couldn't Read, is a very intelligent man. He graduated from High School and College, became a popular High School teacher and later a successful business man,  all without being able to read. Many highly intelligent people have struggled with reading; although, when properly taught, most people can learn to read easily and quickly.

            Now, if a man like John Corcoran can succeed without reading, why is reading important? A person should really read Mr. Corcoran's story to get the feeling of shame, loneliness and fear that he experienced before he learned to read. He was able to succeed in spite of this major handicap because he was a man of intelligence, ability and determination. But, make no mistake, it was a handicap that made life harder and less enjoyable.
        </p>
    </div>

</section>

<section>
    <h2 class="shadowtext" style="text-align:center" ;>Why Is Reading Important?</h2>

    <div class="book">
        <aside>
            <p>
                1. Reading is fundamental to functioning in today's society. There are many adults who cannot read well enough to understand the instructions on a medicine bottle. That is a scary thought - especially for their children. Filling out applications becomes impossible without help. Reading road or warning signs is difficult. Even following a map becomes a chore. Day-to-day activities that many people take for granted become a source of frustration, anger and fear.
            </p>
        </aside>

        <aside>
            <p>
                2. Reading is a vital skill in finding a good job. Many well-paying jobs require reading as a part of job performance. There are reports and memos which must be read and responded to. Poor reading skills increases the amount of time it takes to absorb and react in the workplace. A person is limited in what they can accomplish without good reading and comprehension skills.
            </p>
        </aside>
        <aside>
            <p>
                3. Reading is important because it develops the mind. The mind is a muscle. It needs exercise. Understanding the written word is one way the mind grows in its ability. Teaching young children to read helps them develop their language skills. It also helps them learn to listen. Everybody wants to talk, but few can really listen. Lack of listening skills can result in major misunderstandings which can lead to job loss, marriage breakup, and other disasters - small and great. Reading helps children [and adults] focus on what someone else is communicating.

            </p>
        </aside>
        <aside>
            <p>
                4. Why is reading important? It is how we discover new things. Books, magazines and even the Internet are great learning tools which require the ability to read and understand what is read. A person who knows how to read can educate themselves in any area of life they are interested in. We live in an age where we overflow with information, but reading is the main way to take advantage of it.

            </p>
        </aside>
        <aside>
            <p>
                5. Reading develops the imagination. TV and computer games have their place, but they are more like amusement. Amusement comes from two words "a" [non] and "muse" [think]. Amusement is non-thinking activities. With reading, a person can go anywhere in the world...or even out of it! They can be a king, or an adventurer, or a princess, or... The possibilities are endless. Non-readers never experience these joys to the same extent.

            </p>
        </aside>
        <aside>
            <p>
                6. In line with the above, reading develops the creative side of people. When reading to children, stop every once in awhile and ask them what they think is going to happen next. Get them thinking about the story. When it is finished, ask if they could think of a better ending or anything that would have improved it. If they really liked the story, encourage them to illustrate it with their own drawings or to make up a different story with the same characters. Get the creative juices flowing!

            </p>
        </aside>
    </div>

</section>
<br />
<br />


<div class="col-xs-6 ">
    <div class="thumbnail">
        <h3 style="text-align:center;">Video</h3>
        <video style="margin-left:60px;" width="400" height="280" controls>
            <source src="\Content\Image\Library.mp4" type="video/mp4">
        </video>
    </div>
</div>


<div class="col-xs-6">
    <div class="thumbnail">
        <h3 style="text-align:center;">Canvas</h3>
        <canvas style="margin-left:60px; " id="screen" width="400" height="280"></canvas>
        <script>
            window.addEventListener("keydown", function (e) {
                // space and arrow keys
                if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
                    e.preventDefault();
                }
            }, false);
            document.addEventListener('keydown' || 'keyup', handleKeyUp);
            document.addEventListener('touchstart', handleTouchMove, false);
            const canvas = document.getElementById('screen');
            const ctx = canvas.getContext('2d');
            let vx = 0;
            let vy = 0;
            let timer = 0;
            let realTimeX = 0;
            const cellSize = 20;
            const gameWidth = canvas.width / cellSize;
            const gameHeight = canvas.height / cellSize;

            let trail = [];
            trail.push({ x: 10, y: 10 });
            let fruit = generateFruit();
            score = 0;

            function handleKeyUp(event) {
                console.log("hey");
                if (event.code === "ArrowUp") {
                    if (vy === 1 || realTimeX)
                        return;
                    realTimeX++;
                    vx = 0;
                    vy = -1;
                }
                if (event.code === "ArrowDown") {
                    if (vy === -1 || realTimeX)
                        return;
                    realTimeX++;

                    vx = 0;
                    vy = 1;
                }
                if (event.code === "ArrowRight") {
                    if (vx === -1 || realTimeX)
                        return;
                    realTimeX++;
                    vy = 0;
                    vx = 1;
                }
                if (event.code === "ArrowLeft") {
                    if (vx === 1 || realTimeX)
                        return;
                    realTimeX++;
                    vy = 0;
                    vx = -1;
                }
            }
            function updateSnakePosition() {
                for (let i = trail.length - 1; i > 0; i--) {
                    trail[i] =
                        {
                            x: trail[i - 1].x,
                            y: trail[i - 1].y
                        };
                }
                if (vx == 1) {
                    trail[0].x++;
                    trail[0].x = ((trail[0].x % gameWidth) + gameWidth) % gameWidth;
                    realTimeX = 0;
                }
                if (vx == -1) {
                    trail[0].x--;
                    trail[0].x = ((trail[0].x % gameWidth) + gameWidth) % gameWidth;
                    realTimeX = 0;
                }
                if (vy == 1) {
                    trail[0].y++;
                    trail[0].y = ((trail[0].y % gameHeight) + gameHeight) % gameHeight;
                    realTimeX = 0;
                }
                if (vy == -1) {


                    trail[0].y--;
                    trail[0].y = (trail[0].y + gameHeight) % gameHeight;

                    realTimeX = 0;
                }
            }

            function clearCanvans() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
            }
            function drawbackround() {
                ctx.fillStyle = "rgb(0,0,0)";

                ctx.fillRect(0, 0, canvas.width, canvas.height);
            }
            ctx.beginPath();
            function handleTouchMove(event) {
                console.log("heytouch");
                var touchobj = event.changedTouches[0];
                startx = parseInt(touchobj.clientX);
                starty = parseInt(touchobj.clientY);
                var xtt = event.clientX;
                if (vx === 1 || vx === -1 || (vy === 0 && vx === 0)) {
                    if (starty - trail[0].y * 21 > 0) {
                        vy = 1;
                        vx = 0;

                    }
                    else {
                        vy = -1;
                        vx = 0;
                    }

                    return;
                }
                if (vy === 1 || vy === -1 || (vy === 0 && vx === 0)) {
                    if (startx - trail[0].x * 21 < 0) {
                        vy = 0;
                        vx = -1;

                    }
                    else {
                        vy = 0;
                        vx = 1;
                    }
                    return;
                }
            }
            function drawSnake() {

                ctx.fillStyle = "rgb(0,0,200)";
                ctx.strokeStyle = "rgb(0,0,0)";

                ctx.fillRect(trail[0].x * cellSize, trail[0].y * cellSize, cellSize, cellSize);
                ctx.strokeRect(trail[0].x * cellSize, trail[0].y * cellSize, cellSize, cellSize);

                for (let i = 1; i < trail.length; i++) {
                    //ctx.fillStyle = "rgb(0,200,0)";
                    //ctx.strokeStyle = "rgb(0,0,0)";
                    //ctx.fillRect(trail[i].x * cellSize, trail[i].y * cellSize, cellSize, cellSize);
                    //ctx.strokeRect(trail[i].x * cellSize, trail[i].y * cellSize, cellSize, cellSize);
                    var img = new Image();
                    img.onload = function () {

                        ctx.drawImage(img, trail[i].x * cellSize, trail[i].y * cellSize, cellSize, cellSize);


                    };
                    //img.src = 'https://mdn.mozillademos.org/files/5397/rhino.jpg';
                    img.src = '/Content/Image/book2.jpg';
                }
            }

            function drawFruit() {
                // ctx.fillStyle = "rgb(200,0,0)";
                //ctx.canvas.getContext("/content/image");
                //  ctx.fillStyle = "/image/lol.png";
                // context.drawImage('.lol.png', 0, 0);

                //var img = document.getElementById("scream";
                //ctx.drawImage(img, 10, 10);
                //var img = document.getElementById("image");
                //ctx.drawImage(img,fruit.x * cellSize, fruit.y * cellSize, cellSize, cellSize)   ;

                var img = new Image();
                img.onload = function () {

                    ctx.drawImage(img, fruit.x * cellSize, fruit.y * cellSize, cellSize, cellSize);


                };
                //img.src = 'https://mdn.mozillademos.org/files/5397/rhino.jpg';
                img.src = '/Content/Image/book2.jpg';
            }




            //ctx.fillRect(fruit.x * cellSize, fruit.y * cellSize, cellSize, cellSize);
            //ctx.strokeRect(fruit.x * cellSize, fruit.y * cellSize, cellSize, cellSize);

            //}

            //upsate
            function handleCollision() {
                if (trail[0].x == fruit.x && trail[0].y == fruit.y) {

                    let lastCell = trail[trail.length - 1];
                    let beforeLastCell = trail[trail.length - 2];

                    let newCellX = lastCell.x - vx;
                    let newCellY = lastCell.y - vy;

                    if (beforeLastCell) {
                        newCellX = lastCell.x + (lastCell.x - beforeLastCell.x);
                        newCellY = lastCell.y + (lastCell.y - beforeLastCell.y);
                    }

                    trail.push({
                        x: newCellX,
                        y: newCellY
                    });

                    score++;
                    alon()

                    fruit = generateFruit();
                }

                for (let i = 1; i < trail.length; i++)//collison in self
                {
                    if (trail[0].x === trail[i].x && trail[0].y === trail[i].y) {
                        gameOver();
                    }

                }
            }

            function gameOver() {
                trail = [];
                trail.push({ x: 10, y: 10 });
                score = 0;
                vx = 0;
                vy = 0;
                fruit = generateFruit();
                timer = 0;
                realTimeX = 0;
            }
            function generateFruit() {

                const x = Math.floor((Math.random() * gameWidth));
                const y = Math.floor((Math.random() * gameHeight));

                return { x, y };
            }

            function alon() {
                if (score === 4)
                    alert('Well Done Igor');
            }
            function runTimer() {
                timer++;
            }
            function drawTimer() {
                ctx.fillStyle = "rgb(0,255,255)";
                ctx.font = "20px Arial";
                ctx.fillText(timer, 300, 50);

            }



            function drawScore() {
                ctx.fillStyle = "rgb(255,255,255)";
                ctx.font = "40px Arial";
                ctx.fillText(score, 30, 50);
            }


            function draw() {

                clearCanvans();
                drawbackround();
                drawTimer();
                drawFruit();
                drawSnake();
                drawScore();

            }
            function update() {
                runTimer();
                handleCollision();
                updateSnakePosition();
            }
            function mainLoop() {
                update();
                draw();

            }
            setInterval(mainLoop, 1 / 10 * 1000);


        </script>

    </div>
</div>

<br />
<br />

