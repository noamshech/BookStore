@{
    ViewBag.Title = "Statistics";
}

<script src="https://d3js.org/d3.v4.js"></script>
<div class="text-center">
    <h2>Watch some statistics..</h2>
    <hr>
</div>

<div class="row">
    <div class="col-sm-6">
        <div class="card">
            <div class="card-body">
                <!-- Load d3.js -->
                <script src="https://d3js.org/d3.v4.js"></script>
                This graph shows the deviation of books against prices.

                <!-- Create a div where the graph will take place -->
                <div id="my_dataviz" style="margin-left: -10px; margin-top: 10px;"></div>

                <script>

                    // set the dimensions and margins of the graph
                    var margin = { top: 10, right: 30, bottom: 30, left: 40 },
                        width = 460 - margin.left - margin.right,
                        height = 400 - margin.top - margin.bottom;

                    // append the svg object to the body of the page
                    var svg = d3.select("#my_dataviz")
                        .append("svg")
                        .attr("width", width + margin.left + margin.right)
                        .attr("height", height + margin.top + margin.bottom)
                        .append("g")
                        .attr("transform",
                            "translate(" + margin.left + "," + margin.top + ")");

                    // get the data
                    d3.csv("/Stats/GetGraph1", function (data) {

                        // X axis: scale and draw:
                        var x = d3.scaleLinear()
                            .domain([0, 150])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
                            .range([0, width]);
                        svg.append("g")
                            .attr("transform", "translate(0," + height + ")")
                            .call(d3.axisBottom(x));

                        // set the parameters for the histogram
                        var histogram = d3.histogram()
                            .value(function (d) { return d.price; })   // I need to give the vector of value
                            .domain(x.domain())  // then the domain of the graphic
                            .thresholds(x.ticks(70)); // then the numbers of bins

                        // And apply this function to data to get the bins
                        var bins = histogram(data);

                        // Y axis: scale and draw:
                        var y = d3.scaleLinear()
                            .range([height, 0]);
                        y.domain([0, d3.max(bins, function (d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously
                        svg.append("g")
                            .call(d3.axisLeft(y));

                        // append the bar rectangles to the svg element
                        svg.selectAll("rect")
                            .data(bins)
                            .enter()
                            .append("rect")
                            .attr("x", 1)
                            .attr("transform", function (d) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })
                            .attr("width", function (d) { return x(d.x1) - x(d.x0) - 1; })
                            .attr("height", function (d) { return height - y(d.length); })
                            .style("fill", "#69b3a2")

                    });
                </script>
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="card">
            <div class="card-body">
                This graph shows the ratio of the different categories.

                <!-- Create a div where the graph will take place -->
                <div id="graph2" style="margin-top: -20px; margin-top: 10px;"></div>

                <!-- Color scale -->
                <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
                <script>
                            function draw2() {
                                // set the dimensions and margins of the graph
                                var width = 400
                                height = 400
                                margin = 20
                                // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
                                var radius = Math.min(width, height) / 2 - margin
                                // append the svg object to the div called 'graph2'
                                var svg = d3.select("#graph2")
                                    .append("svg")
                                    .attr("width", width)
                                    .attr("height", height)
                                    .append("g")
                                    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
                                // Create dummy data
                                var data = {
                                    @foreach (var item in ViewBag.Map)
                                    {
                                        if (item.Key.Contains(" "))
                                        {
                                            continue;
                                        }

                                        @Html.Raw(item.Key + ": " + item.Value + ",");
                                    }
                                }
                                // set the color scale
                                var color = d3.scaleOrdinal()
                                    .domain(data)
                                    .range(d3.schemeSet2);
                                // Compute the position of each group on the pie:
                                var pie = d3.pie()
                                    .value(function (d) { return d.value; })
                                var data_ready = pie(d3.entries(data))
                                // Now I know that group A goes from 0 degrees to x degrees and so on.
                                // shape helper to build arcs:
                                var arcGenerator = d3.arc()
                                    .innerRadius(0)
                                    .outerRadius(radius)
                                // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
                                svg
                                    .selectAll('mySlices')
                                    .data(data_ready)
                                    .enter()
                                    .append('path')
                                    .attr('d', arcGenerator)
                                    .attr('fill', function (d) { return (color(d.data.key)) })
                                    .attr("stroke", "black")
                                    .style("stroke-width", "2px")
                                    .style("opacity", 0.7)
                                // Now add the annotation. Use the centroid method to get the best coordinates
                                svg
                                    .selectAll('mySlices')
                                    .data(data_ready)
                                    .enter()
                                    .append('text')
                                    .text(function (d) { return d.data.key })
                                    .attr("transform", function (d) { return "translate(" + arcGenerator.centroid(d) + ")"; })
                                    .style("text-anchor", "middle")
                                    .style("font-size", 14)
                            }
                            setTimeout(draw2, 1200);
                </script>
            </div>
        </div>
    </div>
</div>      